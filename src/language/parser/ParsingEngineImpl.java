
package language.parser;

import language.parser.framework.Node;
import language.parser.framework.ParsingEngine;
import language.parser.framework.Stack;
import language.parser.framework.Status;
import language.parser.framework.Symbol;
import language.parser.nodes.Add;
import language.parser.nodes.Divide;
import language.parser.nodes.FApply;
import language.parser.nodes.False;
import language.parser.nodes.IdListAppend;
import language.parser.nodes.IdListHead;
import language.parser.nodes.Multiply;
import language.parser.nodes.Negate;
import language.parser.nodes.Not;
import language.parser.nodes.Power;
import language.parser.nodes.Subtract;
import language.parser.nodes.True;
import language.parser.nodes._Punctuation0Token;
import language.parser.nodes._Punctuation10Token;
import language.parser.nodes._Punctuation1Token;
import language.parser.nodes._Punctuation2Token;
import language.parser.nodes._Punctuation3Token;
import language.parser.nodes._Punctuation4Token;
import language.parser.nodes._Punctuation5Token;
import language.parser.nodes._Punctuation6Token;
import language.parser.nodes._Punctuation7Token;
import language.parser.nodes._Punctuation8Token;
import language.parser.nodes._Punctuation8exp_Punctuation9exp;
import language.parser.nodes._Punctuation9Token;
import language.parser.nodes.binopAbstractNode;
import language.parser.nodes.binopexp;
import language.parser.nodes.expAbstractNode;
import language.parser.nodes.floatToken;
import language.parser.nodes.floatexp;
import language.parser.nodes.idToken;
import language.parser.nodes.idexp;
import language.parser.nodes.idlistAbstractNode;
import language.parser.nodes.idlist_Punctuation5expassign;
import language.parser.nodes.intToken;
import language.parser.nodes.intexp;
import language.parser.nodes.uopAbstractNode;
import language.parser.nodes.uopexp;


/**
 * This class was generated by the LRPaGe parser generator v1.0 using the com.sun.codemodel library.
 * 
 * <P>LRPaGe is available from https://github.com/tbepler/LRPaGe.
 * <P>CodeModel is available from https://codemodel.java.net/.
 * 
 */
public class ParsingEngineImpl
    implements ParsingEngine<Visitor>
{


    private ParsingEngineImpl.Actions getAction(int state, Node<Visitor> lookahead) {
        switch (state) {
            case  1 :
                return this.getState1Action(lookahead);
            case  2 :
                return this.getState2Action(lookahead);
            case  3 :
                return this.getState3Action(lookahead);
            case  4 :
                return this.getState4Action(lookahead);
            case  5 :
                return this.getState5Action(lookahead);
            case  6 :
                return this.getState6Action(lookahead);
            case  7 :
                return this.getState7Action(lookahead);
            case  8 :
                return this.getState8Action(lookahead);
            case  9 :
                return this.getState9Action(lookahead);
            case  10 :
                return this.getState10Action(lookahead);
            case  11 :
                return this.getState11Action(lookahead);
            case  12 :
                return this.getState12Action(lookahead);
            case  13 :
                return this.getState13Action(lookahead);
            case  14 :
                return this.getState14Action(lookahead);
            case  15 :
                return this.getState15Action(lookahead);
            case  16 :
                return this.getState16Action(lookahead);
            case  17 :
                return this.getState17Action(lookahead);
            case  18 :
                return this.getState18Action(lookahead);
            case  0 :
                return this.getState0Action(lookahead);
            case  19 :
                return this.getState19Action(lookahead);
            case  20 :
                return this.getState20Action(lookahead);
            case  21 :
                return this.getState21Action(lookahead);
            case  22 :
                return this.getState22Action(lookahead);
            case  23 :
                return this.getState23Action(lookahead);
            case  24 :
                return this.getState24Action(lookahead);
            case  25 :
                return this.getState25Action(lookahead);
            case  26 :
                return this.getState26Action(lookahead);
            case  27 :
                return this.getState27Action(lookahead);
            case  28 :
                return this.getState28Action(lookahead);
            case  29 :
                return this.getState29Action(lookahead);
            case  30 :
                return this.getState30Action(lookahead);
            case  31 :
                return this.getState31Action(lookahead);
            case  32 :
                return this.getState32Action(lookahead);
            case  33 :
                return this.getState33Action(lookahead);
            case  34 :
                return this.getState34Action(lookahead);
            case  35 :
                return this.getState35Action(lookahead);
            case  36 :
                return this.getState36Action(lookahead);
            case  37 :
                return this.getState37Action(lookahead);
            case  38 :
                return this.getState38Action(lookahead);
            case  39 :
                return this.getState39Action(lookahead);
            case  40 :
                return this.getState40Action(lookahead);
            case  41 :
                return this.getState41Action(lookahead);
            case  42 :
                return this.getState42Action(lookahead);
            case  43 :
                return this.getState43Action(lookahead);
            case  44 :
                return this.getState44Action(lookahead);
            case  45 :
                return this.getState45Action(lookahead);
            case  46 :
                return this.getState46Action(lookahead);
            case  47 :
                return this.getState47Action(lookahead);
            case  48 :
                return this.getState48Action(lookahead);
            case  49 :
                return this.getState49Action(lookahead);
            case  50 :
                return this.getState50Action(lookahead);
            case  51 :
                return this.getState51Action(lookahead);
            case  52 :
                return this.getState52Action(lookahead);
            case  53 :
                return this.getState53Action(lookahead);
            case  54 :
                return this.getState54Action(lookahead);
            case  55 :
                return this.getState55Action(lookahead);
            case  56 :
                return this.getState56Action(lookahead);
            case  57 :
                return this.getState57Action(lookahead);
            case  58 :
                return this.getState58Action(lookahead);
            default:
                throw new RuntimeException("Unknown state.");
        }
    }

    @Override
    public Status advance(Stack<Visitor> stack, Node<Visitor> lookahead) {
        ParsingEngineImpl.Actions action = getAction(stack.curState(), lookahead);
        switch (action) {
            case REDUCE8 :
            {
                expAbstractNode field1 = ((expAbstractNode) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new FApply(field0, field1).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO20 :
                stack.push(lookahead, 20);
                return Status.NOMINAL;
            case GOTO11 :
                stack.push(lookahead, 11);
                return Status.NOMINAL;
            case GOTO1 :
                stack.push(lookahead, 1);
                return Status.NOMINAL;
            case SHIFT35 :
                stack.push(lookahead, 35);
                return Status.NOMINAL;
            case SHIFT41 :
                stack.push(lookahead, 41);
                return Status.NOMINAL;
            case SHIFT16 :
                stack.push(lookahead, 16);
                return Status.NOMINAL;
            case SHIFT2 :
                stack.push(lookahead, 2);
                return Status.NOMINAL;
            case SHIFT12 :
                stack.push(lookahead, 12);
                return Status.NOMINAL;
            case SHIFT15 :
                stack.push(lookahead, 15);
                return Status.NOMINAL;
            case SHIFT45 :
                stack.push(lookahead, 45);
                return Status.NOMINAL;
            case SHIFT49 :
                stack.push(lookahead, 49);
                return Status.NOMINAL;
            case GOTO40 :
                stack.push(lookahead, 40);
                return Status.NOMINAL;
            case SHIFT6 :
                stack.push(lookahead, 6);
                return Status.NOMINAL;
            case SHIFT48 :
                stack.push(lookahead, 48);
                return Status.NOMINAL;
            case SHIFT17 :
                stack.push(lookahead, 17);
                return Status.NOMINAL;
            case SHIFT25 :
                stack.push(lookahead, 25);
                return Status.NOMINAL;
            case SHIFT14 :
                stack.push(lookahead, 14);
                return Status.NOMINAL;
            case SHIFT58 :
                stack.push(lookahead, 58);
                return Status.NOMINAL;
            case SHIFT47 :
                stack.push(lookahead, 47);
                return Status.NOMINAL;
            case GOTO24 :
                stack.push(lookahead, 24);
                return Status.NOMINAL;
            case SHIFT36 :
                stack.push(lookahead, 36);
                return Status.NOMINAL;
            case GOTO5 :
                stack.push(lookahead, 5);
                return Status.NOMINAL;
            case GOTO44 :
                stack.push(lookahead, 44);
                return Status.NOMINAL;
            case SHIFT29 :
                stack.push(lookahead, 29);
                return Status.NOMINAL;
            case SHIFT31 :
                stack.push(lookahead, 31);
                return Status.NOMINAL;
            case SHIFT28 :
                stack.push(lookahead, 28);
                return Status.NOMINAL;
            case SHIFT50 :
                stack.push(lookahead, 50);
                return Status.NOMINAL;
            case SHIFT53 :
                stack.push(lookahead, 53);
                return Status.NOMINAL;
            case REDUCE16 :
            {
                expAbstractNode field1 = ((expAbstractNode) stack.pop());
                _Punctuation10Token field0 = ((_Punctuation10Token) stack.pop());
                Node<Visitor> reduced = new Not(field0, field1).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE7 :
            {
                uopAbstractNode field0 = ((uopAbstractNode) stack.pop());
                Node<Visitor> reduced = new uopexp(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO39 :
                stack.push(lookahead, 39);
                return Status.NOMINAL;
            case SHIFT30 :
                stack.push(lookahead, 30);
                return Status.NOMINAL;
            case REDUCE9 :
            {
                _Punctuation9Token field2 = ((_Punctuation9Token) stack.pop());
                expAbstractNode field1 = ((expAbstractNode) stack.pop());
                _Punctuation8Token field0 = ((_Punctuation8Token) stack.pop());
                Node<Visitor> reduced = new _Punctuation8exp_Punctuation9exp(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE13 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation3Token field1 = ((_Punctuation3Token) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new Divide(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO51 :
                stack.push(lookahead, 51);
                return Status.NOMINAL;
            case SHIFT21 :
                stack.push(lookahead, 21);
                return Status.NOMINAL;
            case REDUCE18 :
            {
                idToken field1 = ((idToken) stack.pop());
                idlistAbstractNode field0 = ((idlistAbstractNode) stack.pop());
                Node<Visitor> reduced = new IdListAppend(field0, field1).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE12 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation2Token field1 = ((_Punctuation2Token) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new Multiply(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO42 :
                stack.push(lookahead, 42);
                return Status.NOMINAL;
            case REDUCE15 :
            {
                expAbstractNode field1 = ((expAbstractNode) stack.pop());
                _Punctuation1Token field0 = ((_Punctuation1Token) stack.pop());
                Node<Visitor> reduced = new Negate(field0, field1).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE5 :
            {
                _Punctuation7Token field0 = ((_Punctuation7Token) stack.pop());
                Node<Visitor> reduced = new False(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE2 :
            {
                intToken field0 = ((intToken) stack.pop());
                Node<Visitor> reduced = new intexp(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO34 :
                stack.push(lookahead, 34);
                return Status.NOMINAL;
            case GOTO4 :
                stack.push(lookahead, 4);
                return Status.NOMINAL;
            case GOTO37 :
                stack.push(lookahead, 37);
                return Status.NOMINAL;
            case SHIFT27 :
                stack.push(lookahead, 27);
                return Status.NOMINAL;
            case GOTO52 :
                stack.push(lookahead, 52);
                return Status.NOMINAL;
            case GOTO33 :
                stack.push(lookahead, 33);
                return Status.NOMINAL;
            case REDUCE6 :
            {
                binopAbstractNode field0 = ((binopAbstractNode) stack.pop());
                Node<Visitor> reduced = new binopexp(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO46 :
                stack.push(lookahead, 46);
                return Status.NOMINAL;
            case SHIFT19 :
                stack.push(lookahead, 19);
                return Status.NOMINAL;
            case SHIFT3 :
                stack.push(lookahead, 3);
                return Status.NOMINAL;
            case SHIFT56 :
                stack.push(lookahead, 56);
                return Status.NOMINAL;
            case REDUCE0 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation5Token field1 = ((_Punctuation5Token) stack.pop());
                idlistAbstractNode field0 = ((idlistAbstractNode) stack.pop());
                Node<Visitor> reduced = new idlist_Punctuation5expassign(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case SHIFT57 :
                stack.push(lookahead, 57);
                return Status.NOMINAL;
            case GOTO43 :
                stack.push(lookahead, 43);
                return Status.NOMINAL;
            case REDUCE17 :
            {
                idToken field0 = ((idToken) stack.pop());
                Node<Visitor> reduced = new IdListHead(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO26 :
                stack.push(lookahead, 26);
                return Status.NOMINAL;
            case GOTO13 :
                stack.push(lookahead, 13);
                return Status.NOMINAL;
            case SHIFT22 :
                stack.push(lookahead, 22);
                return Status.NOMINAL;
            case REDUCE4 :
            {
                _Punctuation6Token field0 = ((_Punctuation6Token) stack.pop());
                Node<Visitor> reduced = new True(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO23 :
                stack.push(lookahead, 23);
                return Status.NOMINAL;
            case REDUCE10 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation0Token field1 = ((_Punctuation0Token) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new Add(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case REDUCE11 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation1Token field1 = ((_Punctuation1Token) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new Subtract(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO38 :
                stack.push(lookahead, 38);
                return Status.NOMINAL;
            case REDUCE1 :
            {
                idToken field0 = ((idToken) stack.pop());
                Node<Visitor> reduced = new idexp(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case ACCEPT:
                return Status.COMPLETE;
            case REDUCE14 :
            {
                expAbstractNode field2 = ((expAbstractNode) stack.pop());
                _Punctuation4Token field1 = ((_Punctuation4Token) stack.pop());
                expAbstractNode field0 = ((expAbstractNode) stack.pop());
                Node<Visitor> reduced = new Power(field0, field1, field2).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO10 :
                stack.push(lookahead, 10);
                return Status.NOMINAL;
            case SHIFT18 :
                stack.push(lookahead, 18);
                return Status.NOMINAL;
            case REDUCE3 :
            {
                floatToken field0 = ((floatToken) stack.pop());
                Node<Visitor> reduced = new floatexp(field0).replace();
                this.advance(stack, reduced);
                return this.advance(stack, lookahead);
            }
            case GOTO54 :
                stack.push(lookahead, 54);
                return Status.NOMINAL;
            case SHIFT9 :
                stack.push(lookahead, 9);
                return Status.NOMINAL;
            case SHIFT32 :
                stack.push(lookahead, 32);
                return Status.NOMINAL;
            case SHIFT7 :
                stack.push(lookahead, 7);
                return Status.NOMINAL;
            case GOTO55 :
                stack.push(lookahead, 55);
                return Status.NOMINAL;
            case GOTO8 :
                stack.push(lookahead, 8);
                return Status.NOMINAL;
            default:
                return Status.ERROR;
        }
    }

    @Override
    public Symbol[] expectedSymbols(int state) {
        switch (state) {
            case  1 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  2 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  3 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  4 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  5 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  6 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  7 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  8 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  9 :
                return new Symbol[] {Symbols.ID, Symbols._PUNCTUATION5 };
            case  10 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  11 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  12 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  13 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  14 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  15 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  16 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  17 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  18 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  0 :
                return new Symbol[] {Symbols.ASSIGN, Symbols.ID, Symbols.IDLIST };
            case  19 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  20 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  21 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  22 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  23 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  24 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  25 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  26 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  27 :
                return new Symbol[] {Symbols.ID, Symbols._PUNCTUATION5 };
            case  28 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  29 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  30 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  31 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  32 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  33 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  34 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  35 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  36 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  37 :
                return new Symbol[] {Symbols.EOF };
            case  38 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  39 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  40 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  41 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  42 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  43 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  44 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  45 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  46 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  47 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  48 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  49 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  50 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  51 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  52 :
                return new Symbol[] {Symbols.ID, Symbols._PUNCTUATION5 };
            case  53 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  54 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7, Symbols._PUNCTUATION9 };
            case  55 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  56 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  57 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.BINOP, Symbols.ID, Symbols.UOP, Symbols.EXP, Symbols._PUNCTUATION1, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            case  58 :
                return new Symbol[] {Symbols.INT, Symbols.FLOAT, Symbols.ID, Symbols._PUNCTUATION0, Symbols._PUNCTUATION2, Symbols._PUNCTUATION1, Symbols._PUNCTUATION4, Symbols.EOF, Symbols._PUNCTUATION3, Symbols._PUNCTUATION6, Symbols._PUNCTUATION10, Symbols._PUNCTUATION8, Symbols._PUNCTUATION7 };
            default:
                throw new RuntimeException("Unknown state");
        }
    }

    private ParsingEngineImpl.Actions getState1Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE8;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE8;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE8;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.SHIFT35;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT41;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT16;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE8;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState2Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO40;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState3Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO44;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState4Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE16;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE16;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE16;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE16;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState5Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE7;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE7;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE7;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState6Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO39;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT30;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState7Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE9;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE9;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE9;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState8Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE13;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE13;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE13;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE13;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState9Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case ID:
                return ParsingEngineImpl.Actions.REDUCE18;
            case _PUNCTUATION5 :
                return ParsingEngineImpl.Actions.REDUCE18;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState10Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE12;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE12;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE12;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE12;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState11Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE7;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE7;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE7;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE7;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState12Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO42;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState13Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE15;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE15;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE15;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE15;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState14Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE5;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState15Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE2;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE2;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE2;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState16Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO34;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT30;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState17Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO4;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState18Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE9;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE9;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE9;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE9;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState0Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case ASSIGN:
                return ParsingEngineImpl.Actions.GOTO37;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT27;
            case IDLIST:
                return ParsingEngineImpl.Actions.GOTO52;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState19Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO33;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState20Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE6;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE6;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE6;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState21Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO46;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState22Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE5;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState23Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.SHIFT19;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT56;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE0;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT57;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState24Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE6;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE6;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE6;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE6;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState25Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO43;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState26Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE16;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE16;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE16;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE16;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE16;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState27Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case ID:
                return ParsingEngineImpl.Actions.REDUCE17;
            case _PUNCTUATION5 :
                return ParsingEngineImpl.Actions.REDUCE17;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState28Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO26;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState29Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO13;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT22;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState30Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE5;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState31Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE4;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE4;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE4;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState32Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO23;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState33Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE10;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE10;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE10;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT57;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE10;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState34Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE11;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE11;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE11;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT41;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE11;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState35Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO38;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState36Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE1;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE1;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE1;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState37Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case EOF:
                return ParsingEngineImpl.Actions.ACCEPT;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState38Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE10;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE10;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE10;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT41;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE10;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE10;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState39Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE15;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE15;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE15;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE15;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE15;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState40Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE14;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE14;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE14;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState41Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO10;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState42Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE13;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE13;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE13;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE13;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE13;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState43Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.SHIFT35;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT41;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT16;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.SHIFT18;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState44Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE12;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE12;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE12;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE12;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE12;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState45Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE3;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE3;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE3;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState46Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE14;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE14;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE14;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE14;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState47Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE3;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE3;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE3;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE3;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState48Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE4;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE4;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE4;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE4;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState49Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE1;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE1;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE1;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.REDUCE1;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState50Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO54;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT6;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState51Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE8;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE8;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE8;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.SHIFT19;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT56;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT57;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE8;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE8;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState52Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case ID:
                return ParsingEngineImpl.Actions.SHIFT9;
            case _PUNCTUATION5 :
                return ParsingEngineImpl.Actions.SHIFT32;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState53Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE5;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE5;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE5;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState54Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT15;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT45;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO20;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT49;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO11;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO1;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.SHIFT35;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT41;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT16;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT12;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT48;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT17;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT25;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT14;
            case _PUNCTUATION9 :
                return ParsingEngineImpl.Actions.SHIFT7;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState55Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE11;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE11;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE11;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO51;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.SHIFT3;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.SHIFT21;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.SHIFT57;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE11;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE11;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState56Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO55;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT22;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState57Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.SHIFT58;
            case FLOAT:
                return ParsingEngineImpl.Actions.SHIFT47;
            case BINOP:
                return ParsingEngineImpl.Actions.GOTO24;
            case ID:
                return ParsingEngineImpl.Actions.SHIFT36;
            case UOP:
                return ParsingEngineImpl.Actions.GOTO5;
            case EXP:
                return ParsingEngineImpl.Actions.GOTO8;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.SHIFT29;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.SHIFT31;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.SHIFT28;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.SHIFT50;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.SHIFT53;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private ParsingEngineImpl.Actions getState58Action(Node<Visitor> lookahead) {
        switch (((Symbols) lookahead.symbol())) {
            case INT:
                return ParsingEngineImpl.Actions.REDUCE2;
            case FLOAT:
                return ParsingEngineImpl.Actions.REDUCE2;
            case ID:
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION0 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION2 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION1 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION4 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case EOF:
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION3 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION6 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION10 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION8 :
                return ParsingEngineImpl.Actions.REDUCE2;
            case _PUNCTUATION7 :
                return ParsingEngineImpl.Actions.REDUCE2;
            default:
                return ParsingEngineImpl.Actions.ERROR;
        }
    }

    private static enum Actions {

        REDUCE8,
        GOTO20,
        GOTO11,
        GOTO1,
        SHIFT35,
        SHIFT41,
        SHIFT16,
        SHIFT2,
        SHIFT12,
        ERROR,
        SHIFT15,
        SHIFT45,
        SHIFT49,
        GOTO40,
        SHIFT6,
        SHIFT48,
        SHIFT17,
        SHIFT25,
        SHIFT14,
        SHIFT58,
        SHIFT47,
        GOTO24,
        SHIFT36,
        GOTO5,
        GOTO44,
        SHIFT29,
        SHIFT31,
        SHIFT28,
        SHIFT50,
        SHIFT53,
        REDUCE16,
        REDUCE7,
        GOTO39,
        SHIFT30,
        REDUCE9,
        REDUCE13,
        GOTO51,
        SHIFT21,
        REDUCE18,
        REDUCE12,
        GOTO42,
        REDUCE15,
        REDUCE5,
        REDUCE2,
        GOTO34,
        GOTO4,
        GOTO37,
        SHIFT27,
        GOTO52,
        GOTO33,
        REDUCE6,
        GOTO46,
        SHIFT19,
        SHIFT3,
        SHIFT56,
        REDUCE0,
        SHIFT57,
        GOTO43,
        REDUCE17,
        GOTO26,
        GOTO13,
        SHIFT22,
        REDUCE4,
        GOTO23,
        REDUCE10,
        REDUCE11,
        GOTO38,
        REDUCE1,
        ACCEPT,
        REDUCE14,
        GOTO10,
        SHIFT18,
        REDUCE3,
        GOTO54,
        SHIFT9,
        SHIFT32,
        SHIFT7,
        GOTO55,
        GOTO8;

    }

}
